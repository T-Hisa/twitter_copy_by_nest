@types/exppresss のデコレータ一覧
  @Request(), @Req()      -> req
  @Response(), @Res()     -> res
  @Next()                 -> next
  @Session()              -> req.session
  @Param(key?: string)    -> req.session
  @Body(key?: string)     -> req.session
  @Query(key?: string)    -> req.session
  @Headers(name?: string) -> req.session
  @Ip()                   -> req.ip
  @HostParam()            -> req.hosts



HttpException 一覧
  ・BarRequestException
  ・UnauthorizedException
  ・NotFoundException
  ・ForbiddenException
  ・NotAcceptableException
  ・RequestTimeoutException
  ・ConflictException
  ・GoneException
  ・HttpVersionNotSupportedException
  ・PayloadTooLargeException
  ・UnsupportedMediaTypeException
  ・UnprocessableEntityException
  ・InternalServerErrorException
  ・NotImplementedException
  ・ImATeapotExceptionException
  ・MethodNotAllowedException
  ・BadGatewayException
  ・ServiceUnavailableException
  ・GatewayTimeoutException
  ・PreconditionFailedException



Pipeについて
  ・Pipe は二つの使用ケースがある
    1. データを望んだ警視位に変えること(string -> integer)
    2. バリデーション
  どちらのケースでも、route handler で arguments に作用する

  Nest備え付けのPipe一覧
    ・ValidationPipe
    ・ParseIntPipe
    ・ParseBoolPipe
    ・ParseArrayPipe
    ・ParseUUIDPipe
    ・DefaultValuePipe

グローバル(app全体)でカスタムパイプを使用したい場合
```app.ts
    async function bootstrap() {
      const app = await NestFactory.create(AppModule);
      app.useGlobalPipes(new ValidationPipe());
      await app.listen(3000);
    }
    bootstrap();
```


Interceptors
  Interceptorsは、 `Aspext Oriented Programming`(AOP) に触発されている
    ・bind extra logic before / after method execution
        メソッドの実行前後で追加の処理を行う
    ・transform the result returned from a function
        関数の戻り値を変更する
    ・transform the exception thrown from a function
        関数での例外処理を変更する
    ・extend the basic function behavior
        基本的な関数の動作を拡張する
    ・completely override a function depending on specific conditions
        特定の条件での関数をオーバーライドする


asyncronous providers
  DBと接続するときなど、Promise が必要となる場合がある。
    その際は、 async / await を使用して、DBと接続するまで待つことができる
      {
        provide: 'ASYNC_CONNECTION',
        useFactory: async () => {
          const connection = await createConnection(options);
          return connection;
        },
      }



provider scope 
      ・DEFAULT
          アプリ全体を通して単一のインスタンスのもの。デフォルト値。
      ・REQUEST
          request 毎に生成されるインスタンス。request後には毎回ガーベッジコレクションされる
      ・TRANSIENT
          複数のconsumerでは共有されない一瞬のインスタンス。

      usage(使用例):
        1: cat.service.ts

          import { Injectable, Scope } from '@nestjs/common';

          @Injectable({ scope: Scope.REQUEST })
          export class CatsService {}

        2: cat.module.ts
          providers: [{
            provide: 'CACHE_MANAGER',
            useClass: CacheManager,
            scope: Scope.TRANSIENT,
          }]

Controller Scope
  scope の値は、providerと同様
      usage:

        @Controller({
          path: 'sample',
          scope: Scope.REQUEST
        })
        export class SampleController {}