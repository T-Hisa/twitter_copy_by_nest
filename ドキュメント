@types/exppresss のデコレータ一覧
  @Request(), @Req()      -> req
  @Response(), @Res()     -> res
  @Next()                 -> next
  @Session()              -> req.session
  @Param(key?: string)    -> req.session
  @Body(key?: string)     -> req.session
  @Query(key?: string)    -> req.session
  @Headers(name?: string) -> req.session
  @Ip()                   -> req.ip
  @HostParam()            -> req.hosts



HttpException 一覧
  ・BarRequestException
  ・UnauthorizedException
  ・NotFoundException
  ・ForbiddenException
  ・NotAcceptableException
  ・RequestTimeoutException
  ・ConflictException
  ・GoneException
  ・HttpVersionNotSupportedException
  ・PayloadTooLargeException
  ・UnsupportedMediaTypeException
  ・UnprocessableEntityException
  ・InternalServerErrorException
  ・NotImplementedException
  ・ImATeapotExceptionException
  ・MethodNotAllowedException
  ・BadGatewayException
  ・ServiceUnavailableException
  ・GatewayTimeoutException
  ・PreconditionFailedException



Pipeについて
  ・Pipe は二つの使用ケースがある
    1. データを望んだ警視位に変えること(string -> integer)
    2. バリデーション
  どちらのケースでも、route handler で arguments に作用する

  Nest備え付けのPipe一覧
    ・ValidationPipe
    ・ParseIntPipe
    ・ParseBoolPipe
    ・ParseArrayPipe
    ・ParseUUIDPipe
    ・DefaultValuePipe

グローバル(app全体)でカスタムパイプを使用したい場合
```app.ts
    async function bootstrap() {
      const app = await NestFactory.create(AppModule);
      app.useGlobalPipes(new ValidationPipe());
      await app.listen(3000);
    }
    bootstrap();
```


Interceptors
  Interceptorsは、 `Aspext Oriented Programming`(AOP) に触発されている
    ・bind extra logic before / after method execution
        メソッドの実行前後で追加の処理を行う
    ・transform the result returned from a function
        関数の戻り値を変更する
    ・transform the exception thrown from a function
        関数での例外処理を変更する
    ・extend the basic function behavior
        基本的な関数の動作を拡張する
    ・completely override a function depending on specific conditions
        特定の条件での関数をオーバーライドする


asyncronous providers
  DBと接続するときなど、Promise が必要となる場合がある。
    その際は、 async / await を使用して、DBと接続するまで待つことができる
      {
        provide: 'ASYNC_CONNECTION',
        useFactory: async () => {
          const connection = await createConnection(options);
          return connection;
        },
      }



provider scope 
      ・DEFAULT
          アプリ全体を通して単一のインスタンスのもの。デフォルト値。
      ・REQUEST
          request 毎に生成されるインスタンス。request後には毎回ガーベッジコレクションされる
      ・TRANSIENT
          複数のconsumerでは共有されない一瞬のインスタンス。

      usage(使用例):
        1: cat.service.ts

          import { Injectable, Scope } from '@nestjs/common';

          @Injectable({ scope: Scope.REQUEST })
          export class CatsService {}

        2: cat.module.ts
          providers: [{
            provide: 'CACHE_MANAGER',
            useClass: CacheManager,
            scope: Scope.TRANSIENT,
          }]

Controller Scope
  scope の値は、providerと同様
      usage:

        @Controller({
          path: 'sample',
          scope: Scope.REQUEST
        })
        export class SampleController {}



ArgumentsHost Class
  ArgumentsHost は、(request)handler に渡された引数を受け取るクラス。
          exception filter の catch メソッドなどで使用される。
  例えば、
    @nestjs/platform-express
  が使用されている場合、
    host: ArgumentsHost
  は、[request, response, next] array 。

    GraphQL
  の時は、
    [root, args, context, info] array.



Current Application Context

        if (host.getType() === 'http') {
          // do something that is only important in the context of regular HTTP requests (REST)
        } else if (host.getType() === 'rpc') {
          // do something that is only important in the context of Microservice requests
        } else if (host.getType<GqlContextType>() === 'graphql') {
          // do something that is only important in the context of GraphQL requests
        }


GraphQL を使用する場合
  The GqlContextType is imported from the @nestjs/graphql package.

const [req, res, next] = host.getArgs();




ArgumentsHost を Http, rps, websockets それぞれの適したObject に変形するよう明言する

  switchToRpc(): RpcArgumentsHost;
  switchToHttp(): HttpArgumentsHost;
  switchToWs(): WsArgumentsHost;

    http:
      const ctx = host.switchToHttp();
      const request = ctx.getRequest<Request>();
      const response = ctx.getResponse<Response>();

    websockets:
      export interface WsArgumentsHost {
        getData<T>(): T;
        getClient<T>(): T;

    rpc:
      export interface RpcArgumentsHost {
        getData<T>(): T;
        getContext<T>(): T;



ExecutionContext
  ExecutionContext　は、 ArgumentsHost を拡張したもので、
    実行中のcontext の詳細を提供する。

    guard の canActivate() メソッド
    interceptor の intercept() メソッド
  等で使用される。

export interface ExecutionContext extends ArgumentsHost {
  getClass<T>(): Type<T>;
  getHandler(): Function;
}




Reflectorについて


      @Injectable()
      export class RolesGuard {
        constructor(private reflector: Reflector) {}
      }

      const roles = this.reflector.get<string[]>('roles', context.getHandler());

  Reflector#get メソッドは、下記の二つの引数を使用して簡単にmetadata にアクセスできる。
    ・key
    ・context(decorator target)


      RolesGuard デコレータが、
        1.method に修飾されている時は、
          context.getHandler()
        2. controller に修飾されている時は、
          context.getClass()


  以下のように、複数階層で、metadata がセットされている場合は、
      @Roles('user')
      @Controller('cats')
      export class CatsController {
        @Post()
        @Roles('admin')
        async create(@Body() createCatDto: CreateCatDto) {
          this.catsService.create(createCatDto);
        }
      }

  overrideするために、
    getAllAndOverride() メソッドを使用することで解決できる

          const roles = this.reflector.getAllAndOverride<string[]>('roles', [
            context.getHandler(),
            context.getClass(),
          ]);
        => { "roles": ["admin"] }

  また、二つともmergeするには、
    getAllAndMerge() を使用
          const roles = this.reflector.getAllAndMerge<string[]>('roles', [
            context.getHandler(),
            context.getClass(),
          ]);
        => { "roles": ["user", "admin"] }



・LifeCycle

  ライフサイクルは、
    ・initializing
    ・running
    ・terminateing
  の3つのフェーズに分けられる。

  1. Bootstrapping starts
      - Nest core bootstrapping
  2. onModuleInit
      - For each module, after module initialization:
          - await child controller & provider onModduleINit() methods
          - await module onModuleInit() method
  3. onApplicationBootstrap
      - Foreachmodule:
          - await child controller & provider onApplicationBootstrap() methods
          - await module onApplicationBootstrap() method
  4. Start listeners
      - For HTTP server, WS server, each microservice:
          - await connections open/ready
  5. Application is running
      - Normal application processing

------------------Termination signa received -----------------
  1. onModuleDestroy
      - For each module:
          - await child controller & provider onModuleDestroy() methods
          - await modue onModuleDestroy() method
  2. beforeApplicationShutdown
      - For each module:
          - await child controller & provider beforeApplicationShutdown() methods
          - await modue beforeApplicationShutdown() method
  3. Stop listeners
      - For HTTP server, WS server, each microservice:
          - await connection termination
  4. onApplicationShutdown
      - For each module:
          - await child controller & provider onApplicationShutdown() methods
          - await modue onApplicationShutdown() method
  5. Process exits



